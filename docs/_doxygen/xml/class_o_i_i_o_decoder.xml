<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="class_o_i_i_o_decoder" kind="class" language="C++" prot="public">
    <compoundname>OIIODecoder</compoundname>
    <basecompoundref refid="class_decoder" prot="public" virt="non-virtual">Decoder</basecompoundref>
    <includes refid="oiiodecoder_8h" local="no">oiiodecoder.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_o_i_i_o_decoder_1a6ce04f3750a76a85a2602f06eb947751" prot="private" static="no" mutable="no">
        <type>OIIO::ImageInput *</type>
        <definition>OIIO::ImageInput* OIIODecoder::image_</definition>
        <argsstring></argsstring>
        <name>image_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="73" column="20" bodyfile="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_o_i_i_o_decoder_1a28bffbc261f7bee9ae4ec657689d8fc7" prot="private" static="no" mutable="no">
        <type><ref refid="class_pixel_format_1a9bbd1f928ffb889a0bf5212038f6d021" kindref="member">PixelFormat::Format</ref></type>
        <definition>PixelFormat::Format OIIODecoder::pix_fmt_</definition>
        <argsstring></argsstring>
        <name>pix_fmt_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="90" column="23" bodyfile="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_o_i_i_o_decoder_1abcc29fb449922e7e96aeac69755f2e7b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool OIIODecoder::is_rgba_</definition>
        <argsstring></argsstring>
        <name>is_rgba_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="92" column="8" bodyfile="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_o_i_i_o_decoder_1ae5bacd5edd1e318bac66d1868105ad04" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool OIIODecoder::is_sequence_</definition>
        <argsstring></argsstring>
        <name>is_sequence_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="94" column="8" bodyfile="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_o_i_i_o_decoder_1a27125248b7eaa8e8cf259d364d696ca1" prot="private" static="no" mutable="no">
        <type>OIIO::ImageBuf *</type>
        <definition>OIIO::ImageBuf* OIIODecoder::buffer_</definition>
        <argsstring></argsstring>
        <name>buffer_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="96" column="18" bodyfile="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_decoder_1a43ab5fbc422aa7d11f205b1fff3d38b7" prot="private" static="no" mutable="no">
        <type><ref refid="stream_8h_1a3ca5b414655d064180098adf46c1a2f1" kindref="member">StreamPtr</ref></type>
        <definition>StreamPtr Decoder::stream_</definition>
        <argsstring></argsstring>
        <name>stream_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="275" column="13" bodyfile="C:/Daten/Olive/olive/app/codec/decoder.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_o_i_i_o_decoder_1ad9d0bc57119b703b9be78338e23fde5e" prot="private" static="yes" mutable="no">
        <type>QStringList</type>
        <definition>QStringList OIIODecoder::supported_formats_</definition>
        <argsstring></argsstring>
        <name>supported_formats_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="98" column="22" bodyfile="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_o_i_i_o_decoder_1a86bee3ecb3e56d7b34c04a4ebe62d64c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>OIIODecoder::OIIODecoder</definition>
        <argsstring>()</argsstring>
        <name>OIIODecoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="54" column="3"/>
      </memberdef>
      <memberdef kind="function" id="class_o_i_i_o_decoder_1ae32f9dfdee0730e415af963dd530e9fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>QString</type>
        <definition>virtual QString OIIODecoder::id</definition>
        <argsstring>() override</argsstring>
        <name>id</name>
        <reimplements refid="class_decoder_1a4043a5c61c184331d9db680b653685cf">id</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="56" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_o_i_i_o_decoder_1a56a4c755885c47676deddcf0277242a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool OIIODecoder::Probe</definition>
        <argsstring>(Footage *f, const QAtomicInt *cancelled) override</argsstring>
        <name>Probe</name>
        <reimplements refid="class_decoder_1ad337c171cc239556fa57260698fa2ee6">Probe</reimplements>
        <param>
          <type><ref refid="class_footage" kindref="compound">Footage</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const QAtomicInt *</type>
          <declname>cancelled</declname>
        </param>
        <briefdescription>
<para>Probe a footage file and dump metadata about it. </para>
        </briefdescription>
        <detaileddescription>
<para>When a <ref refid="class_footage" kindref="compound">Footage</ref> file is imported, we&apos;ll need to know whether Olive is equipped with a decoder for utilizing it and metadata should be retrieved about it if so. For this purpose, the <ref refid="class_footage" kindref="compound">Footage</ref> object is passed through all <ref refid="class_o_i_i_o_decoder_1a56a4c755885c47676deddcf0277242a1" kindref="member">Probe()</ref> functions of available deocders until one returns TRUE. A FALSE return means the <ref refid="class_decoder" kindref="compound">Decoder</ref> was unable to parse this file and the next should be tried.</para>
<para><ref refid="class_o_i_i_o_decoder_1a56a4c755885c47676deddcf0277242a1" kindref="member">Probe()</ref> differs from <ref refid="class_o_i_i_o_decoder_1a99d9096ffee7a769abe6e48f7c1b65e8" kindref="member">Open()</ref> since it focuses on a file as a whole rather than one particular stream. <ref refid="class_o_i_i_o_decoder_1a56a4c755885c47676deddcf0277242a1" kindref="member">Probe()</ref> should be able to be run directly without calling <ref refid="class_o_i_i_o_decoder_1a99d9096ffee7a769abe6e48f7c1b65e8" kindref="member">Open()</ref> or <ref refid="class_o_i_i_o_decoder_1ab90e9547a1bb661b8748927f354268f9" kindref="member">Close()</ref> and should free its memory before returning.</para>
<para><ref refid="class_o_i_i_o_decoder_1a56a4c755885c47676deddcf0277242a1" kindref="member">Probe()</ref> will never be called on an object that is also used for decoding. In other words, it will never be called alongside <ref refid="class_o_i_i_o_decoder_1a99d9096ffee7a769abe6e48f7c1b65e8" kindref="member">Open()</ref> or <ref refid="class_o_i_i_o_decoder_1ab90e9547a1bb661b8748927f354268f9" kindref="member">Close()</ref> externally, so <ref refid="class_o_i_i_o_decoder_1a56a4c755885c47676deddcf0277242a1" kindref="member">Probe()</ref> can use variables that would otherwise be used for decoding without conflict.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="class_footage" kindref="compound">Footage</ref> object to probe. The <ref refid="class_footage" kindref="compound">Footage</ref> object will have a valid filename and will be empty prior to being sent to this function (i.e. <ref refid="class_footage_1a93958d4ee4da8739c6367eae69ead8e2" kindref="member">Footage::Clear()</ref> will not have to be called).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
TRUE if the <ref refid="class_decoder" kindref="compound">Decoder</ref> was able to decode this file. FALSE if not. This function should have filled the <ref refid="class_footage" kindref="compound">Footage</ref> object with metadata if it returns TRUE. Otherwise, the <ref refid="class_footage" kindref="compound">Footage</ref> object should be untouched. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="58" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_o_i_i_o_decoder_1a99d9096ffee7a769abe6e48f7c1b65e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool OIIODecoder::Open</definition>
        <argsstring>() override</argsstring>
        <name>Open</name>
        <reimplements refid="class_decoder_1a2fe2c3c44ce777ccf950b31a2317ac35">Open</reimplements>
        <briefdescription>
<para>Open media/allocate memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Any file handles or memory allocation that needs to be done before this instance of a <ref refid="class_decoder" kindref="compound">Decoder</ref> can return data should be done here.</para>
<para><simplesect kind="return"><para></para>
</simplesect>
TRUE if successful and ready to return data, FALSE if failed to open and unable to retrieve data. If the function fails, any memory allocated should be free&apos;d before returning FALSE, possibly by calling <ref refid="class_o_i_i_o_decoder_1ab90e9547a1bb661b8748927f354268f9" kindref="member">Close()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="60" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_o_i_i_o_decoder_1afbfbb1dac6a78b0a42f02deeed095226" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_decoder_1aaf2969a042349edc13d9b054894d105f" kindref="member">RetrieveState</ref></type>
        <definition>virtual RetrieveState OIIODecoder::GetRetrieveState</definition>
        <argsstring>(const rational &amp;time) override</argsstring>
        <name>GetRetrieveState</name>
        <reimplements refid="class_decoder_1a274f1d219d51d9549c1201f1f14bafa0">GetRetrieveState</reimplements>
        <param>
          <type>const <ref refid="classrational" kindref="compound">rational</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Determine whether the <ref refid="class_decoder" kindref="compound">Decoder</ref> is able to retrieve data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="61" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_o_i_i_o_decoder_1a5eac6006565e30ba4c5a620e10891744" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="frame_8h_1a2ae9a822fc1e331fa3b449797f717db6" kindref="member">FramePtr</ref></type>
        <definition>virtual FramePtr OIIODecoder::RetrieveVideo</definition>
        <argsstring>(const rational &amp;timecode, const int &amp;divider) override</argsstring>
        <name>RetrieveVideo</name>
        <reimplements refid="class_decoder_1a568cf374d3fe1dd02ddadcaccbd43a96">RetrieveVideo</reimplements>
        <param>
          <type>const <ref refid="classrational" kindref="compound">rational</ref> &amp;</type>
          <declname>timecode</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>divider</declname>
        </param>
        <briefdescription>
<para>Retrieve video frame. </para>
        </briefdescription>
        <detaileddescription>
<para>The main function for retrieving video data from the <ref refid="class_decoder" kindref="compound">Decoder</ref>. This function should always provide complete frame data (i.e. no partial frames) at the timecode provided. The <ref refid="class_decoder" kindref="compound">Decoder</ref> should perform any steps required to retrieve a complete frame separate from the rest of the program, using any form of caching/indexing to keep this as performant as possible.</para>
<para>It&apos;s acceptable for this function to check whether the <ref refid="class_decoder" kindref="compound">Decoder</ref> is open, and call <ref refid="class_o_i_i_o_decoder_1a99d9096ffee7a769abe6e48f7c1b65e8" kindref="member">Open()</ref> if not. If <ref refid="class_o_i_i_o_decoder_1a99d9096ffee7a769abe6e48f7c1b65e8" kindref="member">Open()</ref> returns false, this function should return nullptr.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timecode</parametername>
</parameternamelist>
<parameterdescription>
<para>The timecode (a rational in seconds) to retrieve the frame at. If there is not a frame at this precise location this should be corrected internally to the closest fit for the timecode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
A FramePtr of valid data at this timecode or nullptr if there was nothing to retrieve at the provided timecode or the media could not be opened. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="62" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_o_i_i_o_decoder_1ab90e9547a1bb661b8748927f354268f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void OIIODecoder::Close</definition>
        <argsstring>() override</argsstring>
        <name>Close</name>
        <reimplements refid="class_decoder_1a5fd4e728c00a568890410ab3b5d308c2">Close</reimplements>
        <briefdescription>
<para>Close media/deallocate memory. </para>
        </briefdescription>
        <detaileddescription>
<para>Any file handles or memory allocations opened in <ref refid="class_o_i_i_o_decoder_1a99d9096ffee7a769abe6e48f7c1b65e8" kindref="member">Open()</ref> should be cleaned up here.</para>
<para>As the main memory freeing function, it&apos;s good practice to call this in <ref refid="class_o_i_i_o_decoder_1a99d9096ffee7a769abe6e48f7c1b65e8" kindref="member">Open()</ref> if there&apos;s an error that prevents correct function before <ref refid="class_o_i_i_o_decoder_1a99d9096ffee7a769abe6e48f7c1b65e8" kindref="member">Open()</ref> returns. As such, <ref refid="class_o_i_i_o_decoder_1ab90e9547a1bb661b8748927f354268f9" kindref="member">Close()</ref> should be prepared for not all memory/file handles to have been opened successfully. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="63" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_o_i_i_o_decoder_1ad62ea4c2374315c30241b90aee0d3d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool OIIODecoder::SupportsVideo</definition>
        <argsstring>() override</argsstring>
        <name>SupportsVideo</name>
        <reimplements refid="class_decoder_1ab4d5d39d1903e47e191e2824bfb2438f">SupportsVideo</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="65" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_o_i_i_o_decoder_1a031f94801f853351274f739e2124b868" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>QString</type>
        <definition>virtual QString OIIODecoder::GetIndexFilename</definition>
        <argsstring>() override</argsstring>
        <name>GetIndexFilename</name>
        <reimplements refid="class_decoder_1ad843b561f49d06356a20b9c9f480d3a6">GetIndexFilename</reimplements>
        <briefdescription>
<para>Returns the filename for the index. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the absolute filename of the index file for this stream. <ref refid="class_decoder" kindref="compound">Decoder</ref> must be open for this to work correctly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="67" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_decoder_1a766960ea42ec5dcef66fd22d8482b94a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stream_8h_1a3ca5b414655d064180098adf46c1a2f1" kindref="member">StreamPtr</ref></type>
        <definition>StreamPtr Decoder::stream</definition>
        <argsstring>()</argsstring>
        <name>stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="77" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_decoder_1a209ef567e42228ccd0739378504a9edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Decoder::set_stream</definition>
        <argsstring>(StreamPtr fs)</argsstring>
        <name>set_stream</name>
        <param>
          <type><ref refid="stream_8h_1a3ca5b414655d064180098adf46c1a2f1" kindref="member">StreamPtr</ref></type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="78" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_decoder_1a37bac11d9b19042f13dd2742c964f1ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="samplebuffer_8h_1aa60dc68e3e43775112c8dabb364d0a33" kindref="member">SampleBufferPtr</ref></type>
        <definition>virtual SampleBufferPtr Decoder::RetrieveAudio</definition>
        <argsstring>(const rational &amp;timecode, const rational &amp;length, const AudioRenderingParams &amp;params)</argsstring>
        <name>RetrieveAudio</name>
        <reimplementedby refid="class_f_fmpeg_decoder_1a36cb8de8038d339836fd4061965e135f">RetrieveAudio</reimplementedby>
        <param>
          <type>const <ref refid="classrational" kindref="compound">rational</ref> &amp;</type>
          <declname>timecode</declname>
        </param>
        <param>
          <type>const <ref refid="classrational" kindref="compound">rational</ref> &amp;</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const <ref refid="class_audio_rendering_params" kindref="compound">AudioRenderingParams</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Retrieve video frame. </para>
        </briefdescription>
        <detaileddescription>
<para>The main function for retrieving audio data from the <ref refid="class_decoder" kindref="compound">Decoder</ref>. This function should always provide complete frame data (i.e. no missing samples) at the timecode and length requested. The <ref refid="class_decoder" kindref="compound">Decoder</ref> should perform any steps required to retrieve a complete frame separate from the rest of the program, using any form of caching/indexing to keep this as performant as possible.</para>
<para>It&apos;s acceptable for this function to check whether the <ref refid="class_decoder" kindref="compound">Decoder</ref> is open, and call <ref refid="class_decoder_1a2fe2c3c44ce777ccf950b31a2317ac35" kindref="member">Open()</ref> if not. If <ref refid="class_decoder_1a2fe2c3c44ce777ccf950b31a2317ac35" kindref="member">Open()</ref> returns false, this function should return nullptr.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timecode</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting timecode (a rational in seconds) to retrieve the data at.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The total length of audio data to retrieve (a rational in seconds).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
A FramePtr of valid data at this timecode of the requested length or nullptr if there was nothing to retrieve at the provided timecode or the media could not be opened. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="172" column="27"/>
      </memberdef>
      <memberdef kind="function" id="class_decoder_1aa55e65e31e55399682c6cc9fcd9f2f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Decoder::SupportsAudio</definition>
        <argsstring>()</argsstring>
        <name>SupportsAudio</name>
        <reimplementedby refid="class_f_fmpeg_decoder_1a0c7860125554b8d58a949cdeed24a1e5">SupportsAudio</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="175" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_decoder_1a9c2d54ca80a2a58bf4e03f934e3338de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Decoder::Conform</definition>
        <argsstring>(const AudioRenderingParams &amp;params, const QAtomicInt *cancelled)</argsstring>
        <name>Conform</name>
        <param>
          <type>const <ref refid="class_audio_rendering_params" kindref="compound">AudioRenderingParams</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const QAtomicInt *</type>
          <declname>cancelled</declname>
        </param>
        <briefdescription>
<para>Conform an audio stream to match certain parameters (audio only) </para>
        </briefdescription>
        <detaileddescription>
<para>Resamples and converts the currently open audio to match the params. If the audio doesn&apos;t need conforming (e.g. audio params already match or a conformed match already exists), this function will return immediately. Otherwise it will block the calling thread until the conform is complete. This function should therefore only be called from a background render thread.</para>
<para>All audio decoders must override this. It&apos;s not pure since video decoders don&apos;t need to use this, but default behavior will abort since it should never be called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="229" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_decoder_1a435d1fe3141a553223a8f43e47fbf308" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Decoder::Index</definition>
        <argsstring>(const QAtomicInt *cancelled)</argsstring>
        <name>Index</name>
        <reimplementedby refid="class_f_fmpeg_decoder_1a83e58b6ea6a9521c24282b43a1773d7c">Index</reimplementedby>
        <param>
          <type>const QAtomicInt *</type>
          <declname>cancelled</declname>
        </param>
        <briefdescription>
<para>Create an index for this media. </para>
        </briefdescription>
        <detaileddescription>
<para>Indexes are used to improve speed and reliability of imported media. Calling Retrieve() will automatically check for an index and create one if it doesn&apos;t exist.</para>
<para>Indexing is slow so it&apos;s recommended to do it in a background thread. <ref refid="class_decoder_1a435d1fe3141a553223a8f43e47fbf308" kindref="member">Index()</ref> must be called while the <ref refid="class_decoder" kindref="compound">Decoder</ref> is open, and does not automatically call <ref refid="class_decoder_1a2fe2c3c44ce777ccf950b31a2317ac35" kindref="member">Open()</ref> and <ref refid="class_decoder_1a5fd4e728c00a568890410ab3b5d308c2" kindref="member">Close()</ref> the <ref refid="class_decoder" kindref="compound">Decoder</ref>. The caller must call thse manually. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="240" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_decoder_1aa891c486348824beb350ddb77cb6f0fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Decoder::HasConformedVersion</definition>
        <argsstring>(const AudioRenderingParams &amp;params)</argsstring>
        <name>HasConformedVersion</name>
        <param>
          <type>const <ref refid="class_audio_rendering_params" kindref="compound">AudioRenderingParams</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>AUDIO ONLY: Returns whether a cached transcode of this audio matching the specified params already exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="245" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_o_i_i_o_decoder_1a248d12c1c2c6af2e709d82ccf169ad68" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OIIODecoder::BufferToFrame</definition>
        <argsstring>(OIIO::ImageBuf *buf, FramePtr frame)</argsstring>
        <name>BufferToFrame</name>
        <param>
          <type>OIIO::ImageBuf *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="frame_8h_1a2ae9a822fc1e331fa3b449797f717db6" kindref="member">FramePtr</ref></type>
          <declname>frame</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="69" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_decoder_1a014f610ba2c4122464fc715b6c13d870" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Decoder::ProbeMedia</definition>
        <argsstring>(Footage *f, const QAtomicInt *cancelled)</argsstring>
        <name>ProbeMedia</name>
        <param>
          <type><ref refid="class_footage" kindref="compound">Footage</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const QAtomicInt *</type>
          <declname>cancelled</declname>
        </param>
        <briefdescription>
<para>Try to probe a <ref refid="class_footage" kindref="compound">Footage</ref> file by passing it through all available Decoders. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a helper function designed to abstract the process of communicating with several Decoders from the rest of the application. This function will take a <ref refid="class_footage" kindref="compound">Footage</ref> file and manually pass it through the available Decoders&apos; <ref refid="class_decoder_1ad337c171cc239556fa57260698fa2ee6" kindref="member">Probe()</ref> functions until one indicates that it can decode this file. That <ref refid="class_decoder" kindref="compound">Decoder</ref> will then dump information about the file into the <ref refid="class_footage" kindref="compound">Footage</ref> object for use throughout the program.</para>
<para>Probing may be a lengthy process and it&apos;s recommended to run this in a separate thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="class_footage" kindref="compound">Footage</ref> object with a valid filename. If the <ref refid="class_footage" kindref="compound">Footage</ref> does not have a valid filename (e.g. is empty or file doesn&apos;t exist), this function will return FALSE.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
TRUE if a <ref refid="class_decoder" kindref="compound">Decoder</ref> was successfully able to parse and probe this file. FALSE if not. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="207" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_decoder_1ad79f8bc9438171d55bb872f567d0e615" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="decoder_8h_1ad3c54eeaaa80a244c75e2fadabe0944c" kindref="member">DecoderPtr</ref></type>
        <definition>static DecoderPtr Decoder::CreateFromID</definition>
        <argsstring>(const QString &amp;id)</argsstring>
        <name>CreateFromID</name>
        <param>
          <type>const QString &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="class_decoder" kindref="compound">Decoder</ref> instance using a <ref refid="class_decoder" kindref="compound">Decoder</ref> ID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
A <ref refid="class_decoder" kindref="compound">Decoder</ref> instance or nullptr if a <ref refid="class_decoder" kindref="compound">Decoder</ref> with this ID does not exist </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="216" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_o_i_i_o_decoder_1a4947976752b01b9701f32c02255d8611" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool OIIODecoder::FileTypeIsSupported</definition>
        <argsstring>(const QString &amp;fn)</argsstring>
        <name>FileTypeIsSupported</name>
        <param>
          <type>const QString &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="78" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_o_i_i_o_decoder_1a25ace222df2719f569302dc750346e20" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int OIIODecoder::GetImageSequenceDigitCount</definition>
        <argsstring>(const QString &amp;filename)</argsstring>
        <name>GetImageSequenceDigitCount</name>
        <param>
          <type>const QString &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="80" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_o_i_i_o_decoder_1a73626488415bcc3c6cf27f123af2daa1" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>static QString OIIODecoder::TransformImageSequenceFileName</definition>
        <argsstring>(const QString &amp;filename, const int64_t &amp;number)</argsstring>
        <name>TransformImageSequenceFileName</name>
        <param>
          <type>const QString &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const int64_t &amp;</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="82" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_o_i_i_o_decoder_1a1b4a5af69b20ca29e0c4e6cb546f0172" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>static int64_t OIIODecoder::GetImageSequenceIndex</definition>
        <argsstring>(const QString &amp;filename)</argsstring>
        <name>GetImageSequenceIndex</name>
        <param>
          <type>const QString &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="84" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_o_i_i_o_decoder_1aeb90e8d3154b9200579b6465d298e912" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OIIODecoder::OpenImageHandler</definition>
        <argsstring>(const QString &amp;fn)</argsstring>
        <name>OpenImageHandler</name>
        <param>
          <type>const QString &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="86" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_o_i_i_o_decoder_1a7fe6e41a858de87f4dd4b92ca3073e70" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OIIODecoder::CloseImageHandle</definition>
        <argsstring>()</argsstring>
        <name>CloseImageHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="88" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_decoder_1ac1d273379b1d64b939d365195a7e9b85" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Decoder::ConformInternal</definition>
        <argsstring>(SwrContext *resampler, WaveOutput *output, const char *in_data, int in_sample_count)</argsstring>
        <name>ConformInternal</name>
        <param>
          <type>SwrContext *</type>
          <declname>resampler</declname>
        </param>
        <param>
          <type><ref refid="class_wave_output" kindref="compound">WaveOutput</ref> *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>in_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_sample_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="273" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_decoder_1aaf2969a042349edc13d9b054894d105f" prot="public" static="no" strong="no">
        <type></type>
        <name>RetrieveState</name>
        <enumvalue id="class_decoder_1aaf2969a042349edc13d9b054894d105fabd3e02331c859481b55ea588119cc6c4" prot="public">
          <name>kReady</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_decoder_1aaf2969a042349edc13d9b054894d105facf91f190f975de43755054b2e812c751" prot="public">
          <name>kFailedToOpen</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_decoder_1aaf2969a042349edc13d9b054894d105fa67c4ec6806b95854af466eac34c798bd" prot="public">
          <name>kIndexUnavailable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="63" column="3" bodyfile="C:/Daten/Olive/olive/app/codec/decoder.h" bodystart="63" bodyend="67"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_decoder_1a4b6509473b3fa917cb3c066ae44af6c7" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Decoder::open_</definition>
        <argsstring></argsstring>
        <name>open_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="268" column="8" bodyfile="C:/Daten/Olive/olive/app/codec/decoder.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_decoder_1ac09fc7131e8955106db416ade8b264a1" prot="protected" static="no" mutable="no">
        <type>QMutex</type>
        <definition>QMutex Decoder::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="270" column="10" bodyfile="C:/Daten/Olive/olive/app/codec/decoder.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="signal">
      <memberdef kind="signal" id="class_decoder_1ad37b8056bca7618fec6a562d6a3bec30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Decoder::IndexProgress</definition>
        <argsstring>(int)</argsstring>
        <name>IndexProgress</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>While indexing, this signal will provide progress as a percentage (0-100 inclusive) if available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="251" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_decoder_1a34257307ae1ce675458a07a84118cff3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Decoder::SignalIndexProgress</definition>
        <argsstring>(const int64_t &amp;ts)</argsstring>
        <name>SignalIndexProgress</name>
        <param>
          <type>const int64_t &amp;</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="254" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_decoder_1a533882d542f18da5a00713428dc22704" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QString</type>
        <definition>QString Decoder::GetConformedFilename</definition>
        <argsstring>(const AudioRenderingParams &amp;params)</argsstring>
        <name>GetConformedFilename</name>
        <param>
          <type>const <ref refid="class_audio_rendering_params" kindref="compound">AudioRenderingParams</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Get the destination filename of an audio stream conformed to a set of parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Daten/Olive/olive/app/codec/decoder.h" line="266" column="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Decoder</label>
        <link refid="class_decoder"/>
      </node>
      <node id="1">
        <label>OIIODecoder</label>
        <link refid="class_o_i_i_o_decoder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Decoder</label>
        <link refid="class_decoder"/>
      </node>
      <node id="1">
        <label>OIIODecoder</label>
        <link refid="class_o_i_i_o_decoder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" line="32" column="1" bodyfile="C:/Daten/Olive/olive/app/codec/oiio/oiiodecoder.h" bodystart="33" bodyend="82"/>
    <listofallmembers>
      <member refid="class_o_i_i_o_decoder_1a27125248b7eaa8e8cf259d364d696ca1" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>buffer_</name></member>
      <member refid="class_o_i_i_o_decoder_1a248d12c1c2c6af2e709d82ccf169ad68" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>BufferToFrame</name></member>
      <member refid="class_o_i_i_o_decoder_1ab90e9547a1bb661b8748927f354268f9" prot="public" virt="virtual"><scope>OIIODecoder</scope><name>Close</name></member>
      <member refid="class_o_i_i_o_decoder_1a7fe6e41a858de87f4dd4b92ca3073e70" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>CloseImageHandle</name></member>
      <member refid="class_decoder_1a9c2d54ca80a2a58bf4e03f934e3338de" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>Conform</name></member>
      <member refid="class_decoder_1ac1d273379b1d64b939d365195a7e9b85" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>ConformInternal</name></member>
      <member refid="class_decoder_1ad79f8bc9438171d55bb872f567d0e615" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>CreateFromID</name></member>
      <member refid="class_decoder_1a691a867940a1c494b77e458ae1325352" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>Decoder</name></member>
      <member refid="class_decoder_1adbea95d1bc5f127e19bbfacaedc18c4a" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>Decoder</name></member>
      <member refid="class_o_i_i_o_decoder_1a4947976752b01b9701f32c02255d8611" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>FileTypeIsSupported</name></member>
      <member refid="class_decoder_1a533882d542f18da5a00713428dc22704" prot="protected" virt="non-virtual"><scope>OIIODecoder</scope><name>GetConformedFilename</name></member>
      <member refid="class_o_i_i_o_decoder_1a25ace222df2719f569302dc750346e20" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>GetImageSequenceDigitCount</name></member>
      <member refid="class_o_i_i_o_decoder_1a1b4a5af69b20ca29e0c4e6cb546f0172" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>GetImageSequenceIndex</name></member>
      <member refid="class_o_i_i_o_decoder_1a031f94801f853351274f739e2124b868" prot="public" virt="virtual"><scope>OIIODecoder</scope><name>GetIndexFilename</name></member>
      <member refid="class_o_i_i_o_decoder_1afbfbb1dac6a78b0a42f02deeed095226" prot="public" virt="virtual"><scope>OIIODecoder</scope><name>GetRetrieveState</name></member>
      <member refid="class_decoder_1aa891c486348824beb350ddb77cb6f0fa" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>HasConformedVersion</name></member>
      <member refid="class_o_i_i_o_decoder_1ae32f9dfdee0730e415af963dd530e9fa" prot="public" virt="virtual"><scope>OIIODecoder</scope><name>id</name></member>
      <member refid="class_o_i_i_o_decoder_1a6ce04f3750a76a85a2602f06eb947751" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>image_</name></member>
      <member refid="class_decoder_1a435d1fe3141a553223a8f43e47fbf308" prot="public" virt="virtual"><scope>OIIODecoder</scope><name>Index</name></member>
      <member refid="class_decoder_1ad37b8056bca7618fec6a562d6a3bec30" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>IndexProgress</name></member>
      <member refid="class_o_i_i_o_decoder_1abcc29fb449922e7e96aeac69755f2e7b" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>is_rgba_</name></member>
      <member refid="class_o_i_i_o_decoder_1ae5bacd5edd1e318bac66d1868105ad04" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>is_sequence_</name></member>
      <member refid="class_decoder_1aaf2969a042349edc13d9b054894d105facf91f190f975de43755054b2e812c751" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>kFailedToOpen</name></member>
      <member refid="class_decoder_1aaf2969a042349edc13d9b054894d105fa67c4ec6806b95854af466eac34c798bd" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>kIndexUnavailable</name></member>
      <member refid="class_decoder_1aaf2969a042349edc13d9b054894d105fabd3e02331c859481b55ea588119cc6c4" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>kReady</name></member>
      <member refid="class_decoder_1ac09fc7131e8955106db416ade8b264a1" prot="protected" virt="non-virtual"><scope>OIIODecoder</scope><name>mutex_</name></member>
      <member refid="class_o_i_i_o_decoder_1a86bee3ecb3e56d7b34c04a4ebe62d64c" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>OIIODecoder</name></member>
      <member refid="class_o_i_i_o_decoder_1a99d9096ffee7a769abe6e48f7c1b65e8" prot="public" virt="virtual"><scope>OIIODecoder</scope><name>Open</name></member>
      <member refid="class_decoder_1a4b6509473b3fa917cb3c066ae44af6c7" prot="protected" virt="non-virtual"><scope>OIIODecoder</scope><name>open_</name></member>
      <member refid="class_o_i_i_o_decoder_1aeb90e8d3154b9200579b6465d298e912" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>OpenImageHandler</name></member>
      <member refid="class_o_i_i_o_decoder_1a28bffbc261f7bee9ae4ec657689d8fc7" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>pix_fmt_</name></member>
      <member refid="class_o_i_i_o_decoder_1a56a4c755885c47676deddcf0277242a1" prot="public" virt="virtual"><scope>OIIODecoder</scope><name>Probe</name></member>
      <member refid="class_decoder_1a014f610ba2c4122464fc715b6c13d870" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>ProbeMedia</name></member>
      <member refid="class_decoder_1a37bac11d9b19042f13dd2742c964f1ff" prot="public" virt="virtual"><scope>OIIODecoder</scope><name>RetrieveAudio</name></member>
      <member refid="class_decoder_1aaf2969a042349edc13d9b054894d105f" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>RetrieveState</name></member>
      <member refid="class_o_i_i_o_decoder_1a5eac6006565e30ba4c5a620e10891744" prot="public" virt="virtual"><scope>OIIODecoder</scope><name>RetrieveVideo</name></member>
      <member refid="class_decoder_1a209ef567e42228ccd0739378504a9edc" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>set_stream</name></member>
      <member refid="class_decoder_1a34257307ae1ce675458a07a84118cff3" prot="protected" virt="non-virtual"><scope>OIIODecoder</scope><name>SignalIndexProgress</name></member>
      <member refid="class_decoder_1a766960ea42ec5dcef66fd22d8482b94a" prot="public" virt="non-virtual"><scope>OIIODecoder</scope><name>stream</name></member>
      <member refid="class_decoder_1a43ab5fbc422aa7d11f205b1fff3d38b7" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>stream_</name></member>
      <member refid="class_o_i_i_o_decoder_1ad9d0bc57119b703b9be78338e23fde5e" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>supported_formats_</name></member>
      <member refid="class_decoder_1aa55e65e31e55399682c6cc9fcd9f2f60" prot="public" virt="virtual"><scope>OIIODecoder</scope><name>SupportsAudio</name></member>
      <member refid="class_o_i_i_o_decoder_1ad62ea4c2374315c30241b90aee0d3d38" prot="public" virt="virtual"><scope>OIIODecoder</scope><name>SupportsVideo</name></member>
      <member refid="class_o_i_i_o_decoder_1a73626488415bcc3c6cf27f123af2daa1" prot="private" virt="non-virtual"><scope>OIIODecoder</scope><name>TransformImageSequenceFileName</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
